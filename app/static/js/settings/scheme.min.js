(() => {
    const t = document.getElementById("parts"),
        e = document.getElementById("preview"),
        n = "dmPathParts";

    function o() {
        const e = [...t.children].map((t => ({
            key: t.dataset.key,
            on: !t.classList.contains("off")
        })));
        localStorage.setItem(n, JSON.stringify(e))
    }

    function a() {
        const e = t.querySelector('[data-key="chapter"]');
        e && e !== t.lastElementChild && t.appendChild(e)
    }

    function s() {
        const n = [...t.children].filter((t => !t.classList.contains("off"))).map((t => t.childNodes[0].textContent.trim()));
        e.textContent = n.join(" / ")
    }
    new Sortable(t, {
            animation: 150,
            filter: ".fixed, .toggle",
            preventOnFilter: !0,
            onMove: e => {
                const n = t.querySelector('[data-key="chapter"]');
                if (!n) return !0;
                return !(e.related === n && e.willInsertAfter)
            },
            onEnd: () => {
                a(), s(), o()
            }
        }), t.addEventListener("click", (t => {
            if (!t.target.classList.contains("toggle")) return;
            const e = t.target.closest("li"),
                n = e.dataset.key;
            "title" !== n && "chapter" !== n && (e.classList.toggle("off"), t.target.textContent = e.classList.contains("off") ? "✓" : "✕", s(), o())
        })),
        function() {
            const e = localStorage.getItem(n);
            if (!e) return a(), void s();
            try {
                const n = JSON.parse(e),
                    o = Object.fromEntries([...t.children].map((t => [t.dataset.key, t])));
                n.forEach((({
                    key: e,
                    on: n
                }) => {
                    const a = o[e];
                    a && (t.appendChild(a), function(t, e) {
                        const n = t.querySelector(".toggle");
                        e ? (t.classList.remove("off"), n && (n.textContent = "✕")) : (t.classList.add("off"), n && (n.textContent = "✓"))
                    }(a, n))
                })), [...t.children].forEach((e => {
                    n.find((t => t.key === e.dataset.key)) || t.appendChild(e)
                })), a(), s()
            } catch {
                a(), s()
            }
        }()
})();